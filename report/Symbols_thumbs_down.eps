%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.62.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 568 700
%%HiResBoundingBox: 0 0 568 700
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 568 700 re
W
q
q
[1 0 0 1 -32 -43] cm
q
[1 0 0 1 0 0] cm
0 0 612 792 re
W
[1 0 0 -1 0 792] cm
q
/DeviceRGB {} cs
[0 0 0] sc
/DeviceRGB {} CS
[0 0 0] SC
0.216 w
0 J
0 j
[] 0 d
4 M
q
[1 0 0 1 0 0] cm
59.328 145.801 m
140.902 145.801 l
178.344 102.742 219.023 71.207 262.727 51.191 c
276.48 50.113 286.777 49.535 293.328 49.535 c
311.977 49.535 333.07 52.922 356.762 59.398 c
376.344 49.535 l
399.816 49.535 l
453.383 49.535 480.238 68.762 480.238 106.992 c
480.238 109.223 479.879 112.391 479.16 116.93 c
518.473 120.098 538.273 138.887 538.273 173.09 c
538.273 176.762 537.91 181.801 537.121 188.352 c
551.734 192.457 562.68 199.008 570.168 208.152 c
577.656 217.078 581.398 228.672 581.398 242.496 c
581.398 253.656 577.441 265.754 569.449 278.496 c
589.031 299.52 598.895 323.062 598.895 348.984 c
598.895 378.863 582.695 402.91 550.223 421.199 c
517.754 439.273 474.84 448.414 421.273 448.414 c
407.664 448.414 l
411.984 481.246 422.062 513 437.688 543.602 c
446.473 558.863 l
465.336 594.938 474.84 622.871 474.84 642.457 c
474.84 696.742 446.328 730.727 389.016 744.191 c
373.176 748.078 l
345.742 626.617 l
244.586 518.977 l
237.672 510.91 225.793 495.434 208.586 472.535 c
193.32 452.375 l
176.902 430.129 165.312 416.52 158.617 411.695 c
151.848 406.656 141.047 404.207 126.145 404.207 c
62.137 404.207 l
42.551 362.449 32.688 319.32 32.688 275.328 c
32.688 232.414 41.617 189.07 59.328 145.801 c
h
77.473 174.168 m
66.023 207.359 60.48 239.113 60.48 269.352 c
60.48 304.992 66.602 340.055 79.129 374.762 c
124.992 374.762 153.719 377.566 165.312 382.969 c
177.047 388.367 194.617 407.594 217.945 440.207 c
227.23 453.098 241.414 471.238 259.922 494.352 c
369.793 611.352 l
391.609 712.441 l
428.184 700.129 446.473 676.801 446.473 642.457 c
446.473 624.742 440.352 605.375 427.824 584.641 c
420.77 572.543 l
392.184 525.098 378 479.953 378 436.895 c
377.426 421.559 l
397.223 421.559 l
455.039 421.559 498.742 415.801 527.832 404.426 c
557.137 392.832 571.68 375.48 571.68 352.152 c
571.68 331.055 564.047 313.199 548.93 298.656 c
533.809 284.039 515.305 276.77 493.488 276.77 c
460.078 276.406 l
361.008 321.047 l
375.984 343.586 396.07 354.961 421.273 354.961 c
427.824 354.961 436.246 353.449 446.328 350.711 c
456.551 347.688 468.504 343.223 482.473 337.465 c
508.246 336.312 l
533.953 363.742 l
489.602 364.32 l
476.711 369.719 465.121 373.824 454.535 376.273 c
444.023 378.863 434.375 380.16 425.594 380.16 c
378.938 380.16 344.809 356.473 323.352 309.098 c
342 300.312 l
319.031 289.078 301.32 269.352 289.008 241.344 c
310.246 232.199 l
293.473 221.543 277.992 203.473 263.809 177.91 c
297.574 162.215 l
279.145 148.609 264.168 129.602 252.793 104.762 c
319.969 74.734 l
309.168 72.504 299.809 71.352 292.176 71.352 c
270.938 71.93 l
222.406 99.938 183.023 134.062 152.785 174.168 c
77.473 174.168 l
h
326.664 253.441 m
339.406 270.434 354.672 281.305 372.602 286.129 c
454.105 249.551 l
483.047 249.551 l
510.48 249.551 531.215 253.441 545.328 261.145 c
550.008 254.594 552.457 248.258 552.457 242.496 c
552.457 231.266 546.84 222.84 535.824 217.078 c
524.664 211.465 508.031 208.727 485.855 208.727 c
427.824 208.727 l
326.664 253.441 l
h
303.77 189.504 m
305.426 191.734 306.938 193.609 308.016 194.902 c
316.801 205.129 327.238 213.191 339.191 218.953 c
423 181.801 l
511.414 182.375 l
513.07 175.32 l
513.07 153.863 491.832 142.992 449.062 142.992 c
408.023 142.992 l
303.77 189.504 l
h
292.176 115.777 m
294.77 118.945 296.641 121.535 298.152 123.406 c
305.062 133.344 313.848 142.055 324.434 150.121 c
402.625 115.199 l
453.023 115.199 l
453.023 111.887 l
453.023 87.406 435.312 75.312 399.816 75.312 c
381.961 75.312 l
292.176 115.777 l
h
f*
59.328 145.801 m
140.902 145.801 l
178.344 102.742 219.023 71.207 262.727 51.191 c
276.48 50.113 286.777 49.535 293.328 49.535 c
311.977 49.535 333.07 52.922 356.762 59.398 c
376.344 49.535 l
399.816 49.535 l
453.383 49.535 480.238 68.762 480.238 106.992 c
480.238 109.223 479.879 112.391 479.16 116.93 c
518.473 120.098 538.273 138.887 538.273 173.09 c
538.273 176.762 537.91 181.801 537.121 188.352 c
551.734 192.457 562.68 199.008 570.168 208.152 c
577.656 217.078 581.398 228.672 581.398 242.496 c
581.398 253.656 577.441 265.754 569.449 278.496 c
589.031 299.52 598.895 323.062 598.895 348.984 c
598.895 378.863 582.695 402.91 550.223 421.199 c
517.754 439.273 474.84 448.414 421.273 448.414 c
407.664 448.414 l
411.984 481.246 422.062 513 437.688 543.602 c
446.473 558.863 l
465.336 594.938 474.84 622.871 474.84 642.457 c
474.84 696.742 446.328 730.727 389.016 744.191 c
373.176 748.078 l
345.742 626.617 l
244.586 518.977 l
237.672 510.91 225.793 495.434 208.586 472.535 c
193.32 452.375 l
176.902 430.129 165.312 416.52 158.617 411.695 c
151.848 406.656 141.047 404.207 126.145 404.207 c
62.137 404.207 l
42.551 362.449 32.688 319.32 32.688 275.328 c
32.688 232.414 41.617 189.07 59.328 145.801 c
h
77.473 174.168 m
66.023 207.359 60.48 239.113 60.48 269.352 c
60.48 304.992 66.602 340.055 79.129 374.762 c
124.992 374.762 153.719 377.566 165.312 382.969 c
177.047 388.367 194.617 407.594 217.945 440.207 c
227.23 453.098 241.414 471.238 259.922 494.352 c
369.793 611.352 l
391.609 712.441 l
428.184 700.129 446.473 676.801 446.473 642.457 c
446.473 624.742 440.352 605.375 427.824 584.641 c
420.77 572.543 l
392.184 525.098 378 479.953 378 436.895 c
377.426 421.559 l
397.223 421.559 l
455.039 421.559 498.742 415.801 527.832 404.426 c
557.137 392.832 571.68 375.48 571.68 352.152 c
571.68 331.055 564.047 313.199 548.93 298.656 c
533.809 284.039 515.305 276.77 493.488 276.77 c
460.078 276.406 l
361.008 321.047 l
375.984 343.586 396.07 354.961 421.273 354.961 c
427.824 354.961 436.246 353.449 446.328 350.711 c
456.551 347.688 468.504 343.223 482.473 337.465 c
508.246 336.312 l
533.953 363.742 l
489.602 364.32 l
476.711 369.719 465.121 373.824 454.535 376.273 c
444.023 378.863 434.375 380.16 425.594 380.16 c
378.938 380.16 344.809 356.473 323.352 309.098 c
342 300.312 l
319.031 289.078 301.32 269.352 289.008 241.344 c
310.246 232.199 l
293.473 221.543 277.992 203.473 263.809 177.91 c
297.574 162.215 l
279.145 148.609 264.168 129.602 252.793 104.762 c
319.969 74.734 l
309.168 72.504 299.809 71.352 292.176 71.352 c
270.938 71.93 l
222.406 99.938 183.023 134.062 152.785 174.168 c
77.473 174.168 l
h
326.664 253.441 m
339.406 270.434 354.672 281.305 372.602 286.129 c
454.105 249.551 l
483.047 249.551 l
510.48 249.551 531.215 253.441 545.328 261.145 c
550.008 254.594 552.457 248.258 552.457 242.496 c
552.457 231.266 546.84 222.84 535.824 217.078 c
524.664 211.465 508.031 208.727 485.855 208.727 c
427.824 208.727 l
326.664 253.441 l
h
303.77 189.504 m
305.426 191.734 306.938 193.609 308.016 194.902 c
316.801 205.129 327.238 213.191 339.191 218.953 c
423 181.801 l
511.414 182.375 l
513.07 175.32 l
513.07 153.863 491.832 142.992 449.062 142.992 c
408.023 142.992 l
303.77 189.504 l
h
292.176 115.777 m
294.77 118.945 296.641 121.535 298.152 123.406 c
305.062 133.344 313.848 142.055 324.434 150.121 c
402.625 115.199 l
453.023 115.199 l
453.023 111.887 l
453.023 87.406 435.312 75.312 399.816 75.312 c
381.961 75.312 l
292.176 115.777 l
h
S
Q
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
