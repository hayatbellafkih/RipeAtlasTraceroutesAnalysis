%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.62.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 568 700
%%HiResBoundingBox: 0 0 568 700
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 568 700 re
W
q
q
[1 0 0 1 -16 -73] cm
q
[1 0 0 1 0 0] cm
0 0 612 792 re
W
[1 0 0 -1 0 792] cm
q
/DeviceRGB {} cs
[0 0 0] sc
/DeviceRGB {} CS
[0 0 0] SC
0.216 w
0 J
0 j
[] 0 d
4 M
q
[1 0 0 1 0 0] cm
556.344 622.367 m
474.77 622.367 l
437.328 665.426 396.648 696.961 352.945 716.902 c
339.191 718.055 328.895 718.633 322.344 718.633 c
303.695 718.633 282.602 715.246 258.91 708.695 c
239.328 718.633 l
215.855 718.633 l
162.289 718.633 135.434 699.406 135.434 661.176 c
135.434 658.945 135.793 655.777 136.512 651.238 c
97.199 648.07 77.398 629.281 77.398 595.078 c
77.398 591.406 77.762 586.367 78.48 579.816 c
63.938 575.711 52.922 569.16 45.504 560.016 c
38.016 551.09 34.273 539.496 34.273 525.672 c
34.273 514.512 38.23 502.344 46.223 489.672 c
26.641 468.574 16.777 445.105 16.777 419.184 c
16.777 389.305 32.977 365.258 65.449 346.969 c
97.922 328.895 140.832 319.754 194.398 319.754 c
208.008 319.754 l
203.688 286.922 193.609 255.168 177.984 224.566 c
169.199 209.305 l
150.336 173.23 140.832 145.297 140.832 125.711 c
140.832 71.426 169.344 37.441 226.656 23.977 c
242.496 20.09 l
269.93 141.551 l
371.09 249.191 l
378 257.258 389.879 272.734 407.09 295.633 c
422.352 315.793 l
438.77 338.039 450.359 351.648 457.055 356.473 c
463.824 361.512 474.625 363.961 489.527 363.961 c
553.535 363.961 l
573.121 405.719 582.984 448.848 582.984 492.84 c
582.984 535.754 574.055 579.098 556.344 622.367 c
h
538.199 594 m
549.648 560.809 555.191 529.055 555.191 498.816 c
555.191 463.176 549.07 428.113 536.543 393.406 c
490.68 393.406 461.953 390.602 450.359 385.199 c
438.625 379.801 421.055 360.574 397.727 327.742 c
388.441 315.07 374.258 296.93 355.754 273.816 c
245.879 156.816 l
224.062 55.512 l
187.488 68.039 169.199 91.367 169.199 125.711 c
169.199 143.426 175.32 162.793 187.848 183.527 c
194.902 195.625 l
223.488 243.07 237.672 288.215 237.672 331.273 c
238.246 346.609 l
218.449 346.609 l
160.633 346.609 116.93 352.367 87.84 363.742 c
58.535 375.336 43.992 392.688 43.992 416.016 c
43.992 437.113 51.625 454.969 66.742 469.512 c
81.863 484.129 100.367 491.398 122.184 491.398 c
155.594 491.762 l
254.664 447.121 l
239.688 424.586 219.602 413.207 194.398 413.207 c
187.848 413.207 179.426 414.719 169.344 417.457 c
159.121 420.48 147.168 424.945 133.199 430.703 c
107.426 431.855 l
81.719 404.426 l
126.07 403.848 l
138.961 398.449 150.551 394.344 161.137 391.895 c
171.648 389.305 181.297 388.008 190.078 388.008 c
236.734 388.008 270.863 411.695 292.32 459.07 c
273.672 467.855 l
296.641 479.09 314.352 498.816 326.809 526.824 c
305.352 535.969 l
322.199 546.625 337.68 564.695 351.863 590.039 c
318.098 605.953 l
336.527 619.559 351.504 638.566 362.879 663.406 c
295.703 693.434 l
306.504 695.664 315.863 696.816 323.496 696.816 c
344.734 696.238 l
393.266 668.23 432.648 634.105 462.887 594 c
538.199 594 l
h
288.938 514.727 m
276.266 497.734 261 486.719 243.07 482.039 c
161.566 518.617 l
132.625 518.617 l
105.191 518.617 84.457 514.727 70.273 507.023 c
65.664 513.574 63.215 519.91 63.215 525.672 c
63.215 536.902 68.832 545.258 79.848 551.09 c
91.008 556.703 107.641 559.441 129.816 559.441 c
187.848 559.441 l
288.938 514.727 l
h
311.902 578.664 m
310.246 576.434 308.734 574.559 307.656 573.121 c
298.871 563.039 288.434 554.977 276.48 549.215 c
192.672 586.367 l
104.258 585.793 l
102.602 592.848 l
102.602 614.305 123.84 625.176 166.609 625.176 c
207.648 625.176 l
311.902 578.664 l
h
323.496 652.391 m
320.902 649.223 319.031 646.633 317.52 644.762 c
310.609 634.824 301.824 626.113 291.238 618.047 c
213.047 652.969 l
162.648 652.969 l
162.648 656.281 l
162.648 680.762 180.359 692.855 215.855 692.855 c
233.711 692.855 l
323.496 652.391 l
h
f*
556.344 622.367 m
474.77 622.367 l
437.328 665.426 396.648 696.961 352.945 716.902 c
339.191 718.055 328.895 718.633 322.344 718.633 c
303.695 718.633 282.602 715.246 258.91 708.695 c
239.328 718.633 l
215.855 718.633 l
162.289 718.633 135.434 699.406 135.434 661.176 c
135.434 658.945 135.793 655.777 136.512 651.238 c
97.199 648.07 77.398 629.281 77.398 595.078 c
77.398 591.406 77.762 586.367 78.48 579.816 c
63.938 575.711 52.922 569.16 45.504 560.016 c
38.016 551.09 34.273 539.496 34.273 525.672 c
34.273 514.512 38.23 502.344 46.223 489.672 c
26.641 468.574 16.777 445.105 16.777 419.184 c
16.777 389.305 32.977 365.258 65.449 346.969 c
97.922 328.895 140.832 319.754 194.398 319.754 c
208.008 319.754 l
203.688 286.922 193.609 255.168 177.984 224.566 c
169.199 209.305 l
150.336 173.23 140.832 145.297 140.832 125.711 c
140.832 71.426 169.344 37.441 226.656 23.977 c
242.496 20.09 l
269.93 141.551 l
371.09 249.191 l
378 257.258 389.879 272.734 407.09 295.633 c
422.352 315.793 l
438.77 338.039 450.359 351.648 457.055 356.473 c
463.824 361.512 474.625 363.961 489.527 363.961 c
553.535 363.961 l
573.121 405.719 582.984 448.848 582.984 492.84 c
582.984 535.754 574.055 579.098 556.344 622.367 c
h
538.199 594 m
549.648 560.809 555.191 529.055 555.191 498.816 c
555.191 463.176 549.07 428.113 536.543 393.406 c
490.68 393.406 461.953 390.602 450.359 385.199 c
438.625 379.801 421.055 360.574 397.727 327.742 c
388.441 315.07 374.258 296.93 355.754 273.816 c
245.879 156.816 l
224.062 55.512 l
187.488 68.039 169.199 91.367 169.199 125.711 c
169.199 143.426 175.32 162.793 187.848 183.527 c
194.902 195.625 l
223.488 243.07 237.672 288.215 237.672 331.273 c
238.246 346.609 l
218.449 346.609 l
160.633 346.609 116.93 352.367 87.84 363.742 c
58.535 375.336 43.992 392.688 43.992 416.016 c
43.992 437.113 51.625 454.969 66.742 469.512 c
81.863 484.129 100.367 491.398 122.184 491.398 c
155.594 491.762 l
254.664 447.121 l
239.688 424.586 219.602 413.207 194.398 413.207 c
187.848 413.207 179.426 414.719 169.344 417.457 c
159.121 420.48 147.168 424.945 133.199 430.703 c
107.426 431.855 l
81.719 404.426 l
126.07 403.848 l
138.961 398.449 150.551 394.344 161.137 391.895 c
171.648 389.305 181.297 388.008 190.078 388.008 c
236.734 388.008 270.863 411.695 292.32 459.07 c
273.672 467.855 l
296.641 479.09 314.352 498.816 326.809 526.824 c
305.352 535.969 l
322.199 546.625 337.68 564.695 351.863 590.039 c
318.098 605.953 l
336.527 619.559 351.504 638.566 362.879 663.406 c
295.703 693.434 l
306.504 695.664 315.863 696.816 323.496 696.816 c
344.734 696.238 l
393.266 668.23 432.648 634.105 462.887 594 c
538.199 594 l
h
288.938 514.727 m
276.266 497.734 261 486.719 243.07 482.039 c
161.566 518.617 l
132.625 518.617 l
105.191 518.617 84.457 514.727 70.273 507.023 c
65.664 513.574 63.215 519.91 63.215 525.672 c
63.215 536.902 68.832 545.258 79.848 551.09 c
91.008 556.703 107.641 559.441 129.816 559.441 c
187.848 559.441 l
288.938 514.727 l
h
311.902 578.664 m
310.246 576.434 308.734 574.559 307.656 573.121 c
298.871 563.039 288.434 554.977 276.48 549.215 c
192.672 586.367 l
104.258 585.793 l
102.602 592.848 l
102.602 614.305 123.84 625.176 166.609 625.176 c
207.648 625.176 l
311.902 578.664 l
h
323.496 652.391 m
320.902 649.223 319.031 646.633 317.52 644.762 c
310.609 634.824 301.824 626.113 291.238 618.047 c
213.047 652.969 l
162.648 652.969 l
162.648 656.281 l
162.648 680.762 180.359 692.855 215.855 692.855 c
233.711 692.855 l
323.496 652.391 l
h
S
Q
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
